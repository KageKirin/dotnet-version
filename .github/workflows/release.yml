# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://help.github.com/actions/language-and-framework-guides/publishing-nodejs-packages

name: Release

on:
  push:
    tags:
      - '*'

jobs:
  check:
    name: Assumption check
    runs-on: ubuntu-latest
    steps:
      - name: print base_ref
        run: echo ${{ github.event.base_ref }}
      - name: print ref
        run: echo ${{ github.ref }}
      - uses: actions/checkout@v2
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core @ Latest
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'
          include-prerelease: true
          source-url: https://nuget.pkg.github.com/KageKirin/index.json
        env:
          NUGET_AUTH_TOKEN: ${{ github.TOKEN }}
      - name: Install deploy tools
        run: dotnet tool install -g gpr

      - name: .NET Restore
        run: dotnet restore

      - name: .NET Update version to ${{ github.ref }}
        run: dotnet run -f net6.0 -- set dotnet-version.csproj ${{ github.ref }}

      - name: .NET Build (win10-x64)
        run: |
          dotnet publish -c Release -f net6.0 -r win10-x64 --self-contained
          ls bin/Release/net6.0/win10-x64/publish/
      - name: Upload build artifacts (win10-x64)
        uses: actions/upload-artifact@v2
        with:
          path: bin/Release/net6.0/win10-x64/publish/dotnet-version.exe

      - name: .NET Build (osx.11.0-x64)
        run: |
          dotnet publish -c Release -f net6.0 -r osx.11.0-x64 --self-contained
          ls bin/Release/net6.0/osx.11.0-x64/publish/
      - name: Upload build artifacts (osx.11.0-x64)
        uses: actions/upload-artifact@v2
        with:
          path: bin/Release/net6.0/osx.11.0-x64/publish/dotnet-version

      - name: .NET Build (linux-x64)
        run: |
          dotnet publish -c Release -f net6.0 -r linux-x64 --self-contained
          ls bin/Release/net6.0/linux-x64/publish/
      - name: Upload build artifacts (linux-x64)
        uses: actions/upload-artifact@v2
        with:
          path: bin/Release/net6.0/linux-x64/publish/dotnet-version

      - name: .NET Build (linux-musl-x64)
        run: |
          dotnet publish -c Release -f net6.0 -r linux-musl-x64 --self-contained
          ls bin/Release/net6.0/linux-musl-x64/publish/
      - name: Upload build artifacts (linux-musl-x64)
        uses: actions/upload-artifact@v2
        with:
          path: bin/Release/net6.0/linux-musl-x64/publish/dotnet-version

      - name: Create release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: Release ${{ github.ref }}
          tag_name: ${{ github.ref }}
          #body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}

      - name: Prepare release artifacts (win10-x64)
        run: |
          ls ./bin/Release/net6.0/win10-x64/publish/
          tar caf dotnet-version-win10-x64.tar.gz -C ./bin/Release/net6.0/win10-x64/publish/ .
          tar tvf dotnet-version-win10-x64.tar.gz
      - name: Upload release artifacts (win10-x64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dotnet-version-win10-x64.tar.gz
          asset_name: dotnet-version-win10-x64.tar.gz
          asset_content_type: application/gzip

      - name: Prepare release artifacts (osx.11.0-x64)
        run: |
          ls ./bin/Release/net6.0/osx.11.0-x64/publish/
          tar caf dotnet-version-osx.11.0-x64.tar.gz -C ./bin/Release/net6.0/osx.11.0-x64/publish/ .
          tar tvf dotnet-version-osx.11.0-x64.tar.gz
      - name: Upload release artifacts (osx.11.0-x64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dotnet-version-osx.11.0-x64.tar.gz
          asset_name: dotnet-version-osx.11.0-x64.tar.gz
          asset_content_type: application/gzip

      - name: Prepare release artifacts (linux-x64)
        run: |
          ls ./bin/Release/net6.0/linux-x64/publish/
          tar caf dotnet-version-linux-x64.tar.gz -C ./bin/Release/net6.0/linux-x64/publish/ .
          tar tvf dotnet-version-linux-x64.tar.gz
      - name: Upload release artifacts (linux-x64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dotnet-version-linux-x64.tar.gz
          asset_name: dotnet-version-linux-x64.tar.gz
          asset_content_type: application/gzip

      - name: Prepare release artifacts (linux-musl-x64)
        run: |
          ls ./bin/Release/net6.0/linux-musl-x64/publish/
          tar caf dotnet-version-linux-musl-x64.tar.gz -C ./bin/Release/net6.0/linux-musl-x64/publish/ .
          tar tvf dotnet-version-linux-musl-x64.tar.gz
      - name: Upload release artifacts (linux-musl-x64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dotnet-version-linux-musl-x64.tar.gz
          asset_name: dotnet-version-linux-musl-x64.tar.gz
          asset_content_type: application/gzip

      - name: .NET Pack
        run: |
          dotnet build -c Release
          dotnet pack -c Release

      - name: .NET Publish NuGet
        run: gpr push nupkg/dotnet-version.${{ github.ref }}.nupkg -k ${{ github.TOKEN }}
